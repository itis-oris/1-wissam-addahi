public List<Reader> getAllReaders() {
    List<Reader> readers = new ArrayList<>();
    String query = "SELECT * FROM Readers";




public List<Reader> getAllReadersInRoom (int idRoom) {
        List<Reader> readers = new ArrayList<>();
        String query = "SELECT * FROM Readers WHERE idRoom = " + idRoom;




public Reader getReaderById(int id) {
        Reader reader = null;
        String query = "SELECT * FROM Readers WHERE id = " + id;




public boolean addReader(Reader reader) {
    String query = "INSERT INTO Readers (libraryCardNumber, firstName, lastName, passportNumber, dateBirth, address, phoneNumber, educationLevel, academicDegree, idRoom) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";




public boolean updateReader(Reader reader) {
    String query = "UPDATE Readers SET libraryCardNumber = ?, firstName = ?, lastName = ?, passportNumber = ?, dateBirth = ?, address = ?, phoneNumber = ?, educationLevel = ?, academicDegree = ?, idRoom = ? WHERE id = ?";




public boolean archevReader (String libraryCard) {
    String sql = "INSERT INTO ArchevReaders (libraryCard,firstName,lastName, dateOfBirth, idRoom) VALUES (?, ?, ?, ?, ?)";
    Reader reader = getReaderByCard(libraryCard);



public boolean deleteReader(int id) {
    String query = "DELETE FROM Readers WHERE id = " + id;




public Reader getReaderByCard(String cardNumber) {
    String query = "SELECT * FROM Readers WHERE libraryCardNumber = '" + cardNumber + "'";



public boolean reRegisterReader(String oldCardNumber, String newCardNumber) {
    Reader reader = getReaderByCard(oldCardNumber);
    reader.setLibraryCardNumber(newCardNumber);
    reader.setDateRegisteration(new java.util.Date());
    return updateReader(reader);
}



public boolean isAssignedBook (int idReader) {
    String query = "SELECT 1 FROM AssignedBookToReader WHERE idReader = " + idReader;




public List<Reader> whichReadersBorrowedBooksMoreThanMounthAgo () {
    List<Reader> readers = new ArrayList<>();
    String query = "SELECT * FROM AssignedBookToReader";





 public int countBookInLibrary (String codeBook) {
        int count = 0;
        int id = bookDAO.getIdByCode(codeBook);
        String query = "SELECT count FROM CopiesBookByRoom WHERE idBook = " + id;





public List<Reader> whichReadersHaveBeenAssignedBookWhereTheNumberOfCopiesInTheLibraryDoesNotExceed(int two) {
     List<Reader> readers = new ArrayList<>();
     String query = "SELECT * FROM AssignedBookToReader";




public int countReadersCurrentlyInLibrary () {
    String query = "SELECT COUNT(*) FROM Readers";
    int count = 0;





public boolean chekOld(java.util.Date birth, int old) {
    LocalDate birthLocal;
    if (birth instanceof java.sql.Date) {
        birthLocal = ((java.sql.Date) birth).toLocalDate();
    } else {
        birthLocal = birth.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    return Period.between(birthLocal, LocalDate.now()).getYears() <= old;
}




public int howManyReadersUnder20YearOld (int year) {
    List<Reader> readers = getAllReaders();
    int count = 0;
    for (Reader reader : readers) {
        if (chekOld(reader.getDateBirth(), year)) {
            count = count + 1;
        }
    }
    return count;
}





public double getPercentagesByReaders(String eduLevOrDegree) {
        String educationLevelQuery = "SELECT COUNT(*) FROM Readers WHERE educationLevel = ?";
        String academicDegreeQuery = "SELECT COUNT(*) FROM Readers WHERE academicDegree = ?";
        double countReaders = countReadersCurrentlyInLibrary(); // Total number of readers

        if (countReaders == 0) {
            return 0;
        }

        if (eduLevOrDegree.equals("Primary") || eduLevOrDegree.equals("Secondary") || eduLevOrDegree.equals("Higher")) {
            try (Connection connection = DataBaseConnection.getConnection();
                 PreparedStatement statement = connection.prepareStatement(educationLevelQuery)) {

                statement.setString(1, eduLevOrDegree);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        double countLevel = resultSet.getInt(1);
                        return (countLevel / countReaders) * 100;
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            try (Connection connection = DataBaseConnection.getConnection();
                 PreparedStatement statementHigher = connection.prepareStatement(educationLevelQuery);
                 PreparedStatement statementDegree = connection.prepareStatement(academicDegreeQuery)) {

                statementHigher.setString(1, "Higher");
                double countHigher = 0;
                try (ResultSet resultSetHigher = statementHigher.executeQuery()) {
                    if (resultSetHigher.next()) {
                        countHigher = resultSetHigher.getInt(1);
                    }
                }

                statementDegree.setString(1, eduLevOrDegree);
                try (ResultSet resultSetDegree = statementDegree.executeQuery()) {
                    if (resultSetDegree.next() && countHigher > 0) {
                        double countDegree = resultSetDegree.getInt(1);
                        return (countDegree / countHigher) * 100;
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return 0;
    }






public boolean unReRegisteredReaders () {
    List<Reader> readers = getAllReaders();
    LocalDate now = LocalDate.now();
    for (Reader reader : readers) {
        LocalDate readerRegistered = reader.getDateRegisteration().toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        if (Period.between(readerRegistered,now).getYears() > 1) {
            if (!deleteReader(reader.getId())) {
                return false;
            }
        }
    }
    return true;
}





public List<Book> getBooksAssignedToReader (int idReader) {
    List<Book> books = new ArrayList<>();
    String sql = "SELECT * FROM AssignedBookToReader WHERE idReader = " + idReader;




public int getMonthlyRegistrations() {
    int count = 0;
    String query = "SELECT COUNT(*) FROM Readers " +
            "WHERE EXTRACT(MONTH FROM dateRegisteration) = EXTRACT(MONTH FROM CURRENT_DATE) " +
            "AND EXTRACT(YEAR FROM dateRegisteration) = EXTRACT(YEAR FROM CURRENT_DATE)";